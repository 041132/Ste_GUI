# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.0.1
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info < (2, 7, 0):
    raise RuntimeError("Python 2.7 or later required")

# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _stegan
else:
    import _stegan

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "thisown":
            self.this.own(value)
        elif name == "this":
            set(self, name, value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


LENGTH_NAME = _stegan.LENGTH_NAME
PASSWORD_LENGTH = _stegan.PASSWORD_LENGTH
CONTENT = _stegan.CONTENT
class WaveFileHead(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    riff_id = property(_stegan.WaveFileHead_riff_id_get, _stegan.WaveFileHead_riff_id_set)
    size0 = property(_stegan.WaveFileHead_size0_get, _stegan.WaveFileHead_size0_set)
    wave = property(_stegan.WaveFileHead_wave_get, _stegan.WaveFileHead_wave_set)
    fmt = property(_stegan.WaveFileHead_fmt_get, _stegan.WaveFileHead_fmt_set)
    size1 = property(_stegan.WaveFileHead_size1_get, _stegan.WaveFileHead_size1_set)
    fmttag = property(_stegan.WaveFileHead_fmttag_get, _stegan.WaveFileHead_fmttag_set)
    channel = property(_stegan.WaveFileHead_channel_get, _stegan.WaveFileHead_channel_set)
    sampl = property(_stegan.WaveFileHead_sampl_get, _stegan.WaveFileHead_sampl_set)
    bytepersecblockalign = property(_stegan.WaveFileHead_bytepersecblockalign_get, _stegan.WaveFileHead_bytepersecblockalign_set)
    blockalign = property(_stegan.WaveFileHead_blockalign_get, _stegan.WaveFileHead_blockalign_set)
    bitpersamples = property(_stegan.WaveFileHead_bitpersamples_get, _stegan.WaveFileHead_bitpersamples_set)
    data = property(_stegan.WaveFileHead_data_get, _stegan.WaveFileHead_data_set)
    datasize = property(_stegan.WaveFileHead_datasize_get, _stegan.WaveFileHead_datasize_set)

    def __init__(self):
        _stegan.WaveFileHead_swiginit(self, _stegan.new_WaveFileHead())
    __swig_destroy__ = _stegan.delete_WaveFileHead

# Register WaveFileHead in _stegan:
_stegan.WaveFileHead_swigregister(WaveFileHead)

class AUDIO(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    a = property(_stegan.AUDIO_a_get, _stegan.AUDIO_a_set)
    b = property(_stegan.AUDIO_b_get, _stegan.AUDIO_b_set)

    def __init__(self):
        _stegan.AUDIO_swiginit(self, _stegan.new_AUDIO())
    __swig_destroy__ = _stegan.delete_AUDIO

# Register AUDIO in _stegan:
_stegan.AUDIO_swigregister(AUDIO)

class RGB(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    b = property(_stegan.RGB_b_get, _stegan.RGB_b_set)
    g = property(_stegan.RGB_g_get, _stegan.RGB_g_set)
    r = property(_stegan.RGB_r_get, _stegan.RGB_r_set)

    def __init__(self):
        _stegan.RGB_swiginit(self, _stegan.new_RGB())
    __swig_destroy__ = _stegan.delete_RGB

# Register RGB in _stegan:
_stegan.RGB_swigregister(RGB)

class stegan(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    content = property(_stegan.stegan_content_get, _stegan.stegan_content_set)

    def setinput(self, input):
        return _stegan.stegan_setinput(self, input)

    def setinput_password(self, password):
        return _stegan.stegan_setinput_password(self, password)

    def setpassword(self, password):
        return _stegan.stegan_setpassword(self, password)

    def getpassword(self, randnum, randword, length):
        return _stegan.stegan_getpassword(self, randnum, randword, length)

    def getpassword2(self, randnum, randword, length):
        return _stegan.stegan_getpassword2(self, randnum, randword, length)

    def printbinary(self, value):
        return _stegan.stegan_printbinary(self, value)

    def printpassword(self, x, length):
        return _stegan.stegan_printpassword(self, x, length)

    def printpassword2(self, x, show_num):
        return _stegan.stegan_printpassword2(self, x, show_num)

    def print_ste_words(self, s):
        return _stegan.stegan_print_ste_words(self, s)

    def bmphidden(self, strFile):
        return _stegan.stegan_bmphidden(self, strFile)

    def bmpshow(self, strFile):
        return _stegan.stegan_bmpshow(self, strFile)

    def wavhidden(self, strFile):
        return _stegan.stegan_wavhidden(self, strFile)

    def wavshow(self, strFile):
        return _stegan.stegan_wavshow(self, strFile)

    def __init__(self):
        _stegan.stegan_swiginit(self, _stegan.new_stegan())
    __swig_destroy__ = _stegan.delete_stegan

# Register stegan in _stegan:
_stegan.stegan_swigregister(stegan)



